# С помощью функции zip необходимо выравнить эту таблицу, приведя ее 
# к прямоугольному виду, отбросив выходящие элементы в строках.

# Sample Input:
# 1 2 3 4 5 6
# 3 4 5 6
# 7 8 9
# 9 7 5 3 2

# Sample Output:
# 1 2 3
# 3 4 5
# 7 8 9
# 9 7 5

import sys

# считывание списка из входного потока
lst_in = list(map(str.strip, sys.stdin.readlines())) # ['1 2 3 4 5 6', '3 4 5 6', '7 8 9', '9 7 5 3 2']

lst = [list(map(int, l.split())) for l in lst_in] # [[1, 2, 3, 4, 5, 6], [3 4 5 6], [7 8 9], [9 7 5 3 2]]
# Транспонирование
z = zip(*lst) # [(1, 3, 7, 9), (2, 4, 8, 7), (3, 5, 9, 5)] 
res = zip(*z) # [(1, 2, 3), (3, 4, 5), (7, 8, 9), (9, 7, 5)]

for i in res:
    print(*i)


# * `zip(*lst)`: Функция `zip` объединяет элементы из нескольких итерируемых объектов (
#     в нашем случае, из списков в `lst`) попарно. `*lst` разворачивает список `lst`, передавая `zip` 
# каждый список в качестве отдельного аргумента. 
#    * `z = zip(*lst)`: `z` будет содержать список кортежей, где каждый кортеж - 
# это элемент из соответствующей позиции списков в `lst`.
#    * `res = zip(*z)`: Применяем `zip` к результату `z`, чтобы снова объединить элементы, 
# но теперь в обратном порядке, фактически транспонируя исходный список списков.



                                                        # Задача 2. Транспонировать список
# Sample Input:
# 1 2 3 4
# 5 6 7 8
# 9 8 7 6

# Sample Output:
# 1 5 9
# 2 6 8
# 3 7 7
# 4 8 6

lst_in = ['1 2 3 4', '5 6 7 8', '9 8 7 6']

# lst = [list(map(int, l.split())) for l in lst_in] 
# lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 8, 7, 6]] делаем вложенные списки

z = zip(*map(str.split, lst_in))   # ('1', '5', '9') ('2', '6', '8') ('3', '7', '7') ('4', '8', '6') сразу делает картежи, пропуская шаг со вложенными списками

for i in z:
    print(*i)



                            # Задача 3  Составить прямоугольную таблицу из трех столбцов и N строк


# Sample Input:
# Москва Уфа Тула Самара Омск Воронеж Владивосток Лондон Калининград Севастополь

# Sample Output:
# Москва Уфа Тула
# Самара Омск Воронеж
# Владивосток Лондон Калининград

cities = map(str, input().split())

for i in zip(cities, cities, cities):
    print(*i)


# x = (i for i in input().split())  # < 1 2 3 4 5 6 7 8 9 10
# for i in zip(x, x, x):   
#     print(*i)
# Когда zip получает три копии генератора x, он начинает брать по одному элементу из каждого генератора и объединять их в кортежи.
# Таким образом, zip(x, x, x) создает два кортежа: (1, 2, 3) и (4, 5, 6).

# На первом шаге zip берет первый элемент из каждого генератора: (1, 2, 3).
# На втором шаге zip берет следующие элементы: (4, 5, 6).



                            # Задача 4 Сформировать 10 пар кортежей

# На вход программе подается строка. Требуется ее прочитать и сформировать N=10 пар кортежей в формате:
# (символ, порядковый индекс)
# [('S', 0), ('e', 1), ('r', 2), ('g', 3), ('e', 4), ('y', 5), (' ', 6), ('B', 7), ('a', 8), ('l', 9)]

# Первый индекс имеет значение 0. Строка может быть короче 10 символов, а может быть и длиннее. 

s = "Sergey Balakirev"

lst = list(zip(s, range(len(s))))[:10]

print(lst)

