# Необходимо с помощью рекурсивной функции сигнатуры:

# def fib_rec(N, f=[1, 1]): ...
# (здесь N - общее количество чисел Фибоначчи; f - начальный список этих чисел) сформировать 
# последовательность чисел Фибоначчи по правилу: первые два числа равны 1 и 1, 
# а каждое следующе значение равно сумме двух предыдущих. Пример такой последовательности для 
# первых 7 чисел: 1, 1, 2, 3, 5, 8, 13, ...

# Функция должна возвращать список сформированной последовательности длиной N. 
# Вызывать функцию не нужно, только объявить.




N = int(input())    #считываем общее количество чисел Фибоначчи

def fib_rec(N, f=[1, 1]):      #объявляем функцию с двумя параметрами N и списком по умолчанию f = [1, 1] – 
    # начало списка чисел Фибоначчи

    if len(f) < N:                #Проверяем условие выхода из рекурсии, и если условие выполняется, 
        # то в следующей строке

        f.append(f[-1] + f[-2])   #добавляем следующе значение в список f , которое 
        # равно сумме двух предыдущих. Здесь f[-1] и f[-2] последнее и предпоследнее 
        # значение из списка f. Через отрицательный индекс легче всего взять предыдущие значения.

        fib_rec(N, f)               #рекурсивный вызовов функцию. В это момент 
        # дальнейшее выполнение кода прерывается, так как мы вызываем опять функцию, 
        # но в этот вызов передаем без изменений значение N и обновленный список f = [1, 1, 2]. 
        # И это будет повторяться пока условие if будет выполняться (True). 
        # И как только мы достигнем длины списка len(f) >= N прекращается рекурсивный 
        # вызов функции и начинается дальнейшее выполнение ранее прерванного кода, 
        # т.е переходим к строке return

    return f          #в этой строке возвращаем накопленный список f.




# решение 2
N = int(input())

def fib_rec(N, f=[]):
    if N < 3: 
        return [1] * N
    lst = fib_rec(N-1)
    lst.append(lst[-1] + lst[-2])
    return lst

# Возвращает число Фиббоначи
def fibonacci(n):
    if n < 0:
        raise ValueError("n должно быть неотрицательным")
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
    
n = 10  
result = fibonacci(n)
print(f"{n}-е число Фибоначчи: {result}")

# Возвращает последовательность чисел Фиббоначи
def fibonacci_sequence(n):
    if n < 0:
        raise ValueError("n должно быть неотрицательным")
    elif n == 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        sequence = [0, 1]
        for _ in range(2, n):
            next_value = sequence[-1] + sequence[-2]
            sequence.append(next_value)
        return sequence

# Пример использования
n = 10  # Замените n на нужное количество чисел Фибоначчи
result = fibonacci_sequence(n)
print(f"Последовательность Фибоначчи из {n} чисел: {result}")
